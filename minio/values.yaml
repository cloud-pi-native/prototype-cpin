environment: ovh
global:
  imageRegistry: ""
  ## e.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  defaultStorageClass: ""
  storageClass: ""
  ## Compatibility adaptations for Kubernetes platforms
  ##
  compatibility:
    ## Compatibility adaptations for Openshift
    ##
    openshift:
      ## @param global.compatibility.openshift.adaptSecurityContext Adapt the securityContext sections of the deployment to make them compatible with Openshift restricted-v2 SCC: remove runAsUser, runAsGroup and fsGroup and let the platform use their allowed default IDs. Possible values: auto (apply if the detected running cluster is Openshift), force (perform the adaptation always), disabled (do not perform adaptation)
      ##
      adaptSecurityContext: auto
minio:
  enabled: true
  containerSecurityContext:
    enabled: false
  podSecurityContext:
    enabled: false
  auth:
    existingSecret: "minio-admin"
    useSecret: false
    forceNewKeys: false
  networkPolicy:
    enabled: false
  ingress:
    enabled: true
    hostname: minio-prototype.apps.app1.numerique-interieur.com
  apiIngress:
    enabled: true
    hostname: minio-prototype-app.apps.app1.numerique-interieur.com
  defaultBuckets: "prototype-minio"
  resources:
    requests:
      cpu: 250m
      memory: 500Mi
    limits:
      cpu: 1
      memory: 1024Mi
  provisioning:
    enabled: true
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
    resources:
      requests:
        cpu: 250m
        memory: 100Mi
      limits:
        cpu: 500m
        memory: 500Mi
    policies:
      - name: custom-bucket-specific-policy
        statements:
          - resources:
              - "arn:aws:s3:::prototype-minio/*"
            effect: "Allow"
            actions:
              - "s3:AbortMultipartUpload"
              - "s3:DeleteObject"
              - "s3:GetObject"
              - "s3:ListMultipartUploadParts"
              - "s3:PutObject"
    users:
      - username: test
        password: test
        disabled: false
        policies:
          - custom-bucket-specific-policy
        setPolicies: false
    usersExistingSecrets: []
    groups: []
    buckets: []
    cleanupAfterFinished:
      enabled: false
      seconds: 600
    networkPolicy:
      enabled: false
      allowExternalEgress: false
    metrics:
      serviceMonitor:
        enabled: true
    
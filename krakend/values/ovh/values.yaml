replicaCount: 1

image:
  registry: docker.io
  repository: devopsfaith/krakend
  tag: "2.7.0"
  pullPolicy: IfNotPresent

deploymentType: deployment

strategy: {}

krakend:
  allInOneImage: false
  env: []
  config: ""
  configFileSource: ""
  partialsDirSource: ""
  settingsDirSource: ""
  templatesDirSource: ""
  partials:
    input_headers.tmpl: |-
      "input_headers": [
        "Content-Type",
        "ClientId"
      ]
    rate_limit_backend.tmpl: |-
      "qos/ratelimit/proxy": {
        "max_rate": 0.5,
        "capacity": 1
      }
    endpoints.tmpl: |-
      [
        {
          "endpoint": "/test",
          "method": "GET",
          "backend": [
              {
                  "method": "GET",
                  "host": [],
                  "url_pattern": "/__debug/roots",
                  "encoding": "json",
                  "deny": [
                      "message"
                  ]
              }
          ],
          "extra_config": {
              "proxy": {
                  "static": {
                      "data": {
                          "collection": [
                              {
                                  "directories": [
                                      "Graceland"
                                  ]
                              }
                          ],
                          "version": "deficient"
                      },
                      "strategy": "always"
                  }
              }
          },
          "output_encoding": "json"
        }
      ]
  settings:
    service.json: |-
      {
      	"environment": "PRODUCTION",
      	"default_host": "http://localhost:8080",
      	"timeout": "3s",
      	"cache_ttl": "3s",
      	"output_encoding": "json"
      }

serviceAccount:
  create: true

service:
  type: ClusterIP
  port: 80
  targetPort: 8080

ingress:
  enabled: true
  className: ""
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

livenessProbe:
  httpGet:
    path: /__health
    port: http

readinessProbe:
  httpGet:
    path: /__health
    port: http
